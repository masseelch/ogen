// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

// Ref: #/components/schemas/Data
type Data struct {
	ID          ID              `json:"id"`
	Description DataDescription `json:"description"`
	Email       string          `json:"email"`
	Hostname    string          `json:"hostname"`
	Format      string          `json:"format"`
	Base64      []byte          `json:"base64"`
}

// DataDescription represents sum type.
type DataDescription struct {
	Type                DataDescriptionType // switch on this field
	DescriptionDetailed DescriptionDetailed
	DescriptionSimple   DescriptionSimple
}

// DataDescriptionType is oneOf type of DataDescription.
type DataDescriptionType string

// Possible values for DataDescriptionType.
const (
	DescriptionDetailedDataDescription DataDescriptionType = "DescriptionDetailed"
	DescriptionSimpleDataDescription   DataDescriptionType = "DescriptionSimple"
)

// IsDescriptionDetailed reports whether DataDescription is DescriptionDetailed.
func (s DataDescription) IsDescriptionDetailed() bool {
	return s.Type == DescriptionDetailedDataDescription
}

// IsDescriptionSimple reports whether DataDescription is DescriptionSimple.
func (s DataDescription) IsDescriptionSimple() bool {
	return s.Type == DescriptionSimpleDataDescription
}

// SetDescriptionDetailed sets DataDescription to DescriptionDetailed.
func (s *DataDescription) SetDescriptionDetailed(v DescriptionDetailed) {
	s.Type = DescriptionDetailedDataDescription
	s.DescriptionDetailed = v
}

// GetDescriptionDetailed returns DescriptionDetailed and true boolean if DataDescription is DescriptionDetailed.
func (s DataDescription) GetDescriptionDetailed() (v DescriptionDetailed, ok bool) {
	if !s.IsDescriptionDetailed() {
		return v, false
	}
	return s.DescriptionDetailed, true
}

// NewDescriptionDetailedDataDescription returns new DataDescription from DescriptionDetailed.
func NewDescriptionDetailedDataDescription(v DescriptionDetailed) DataDescription {
	var s DataDescription
	s.SetDescriptionDetailed(v)
	return s
}

// SetDescriptionSimple sets DataDescription to DescriptionSimple.
func (s *DataDescription) SetDescriptionSimple(v DescriptionSimple) {
	s.Type = DescriptionSimpleDataDescription
	s.DescriptionSimple = v
}

// GetDescriptionSimple returns DescriptionSimple and true boolean if DataDescription is DescriptionSimple.
func (s DataDescription) GetDescriptionSimple() (v DescriptionSimple, ok bool) {
	if !s.IsDescriptionSimple() {
		return v, false
	}
	return s.DescriptionSimple, true
}

// NewDescriptionSimpleDataDescription returns new DataDescription from DescriptionSimple.
func NewDescriptionSimpleDataDescription(v DescriptionSimple) DataDescription {
	var s DataDescription
	s.SetDescriptionSimple(v)
	return s
}

// Ref: #/components/schemas/DescriptionDetailed
type DescriptionDetailed struct {
	Name  string `json:"name"`
	Count int    `json:"count"`
}

// Ref: #/components/schemas/DescriptionSimple
type DescriptionSimple struct {
	Description string `json:"description"`
}

type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

func (*ErrorStatusCode) foobarPostRes()          {}
func (*ErrorStatusCode) petGetAvatarByIDRes()    {}
func (*ErrorStatusCode) petUploadAvatarByIDRes() {}

// FoobarPutDef is default response for FoobarPut operation.
type FoobarPutDef struct{}

// FoobarPutDefStatusCode wraps FoobarPutDef with StatusCode.
type FoobarPutDefStatusCode struct {
	StatusCode int
	Response   FoobarPutDef
}

// Ref: #/components/schemas/Hash
type Hash struct {
	Raw []byte `json:"raw"`
	Hex string `json:"hex"`
}

// Ref: #/components/schemas/ID
// ID represents sum type.
type ID struct {
	Type   IDType // switch on this field
	String string
	Int    int
}

// IDType is oneOf type of ID.
type IDType string

// Possible values for IDType.
const (
	StringID IDType = "string"
	IntID    IDType = "int"
)

// IsString reports whether ID is string.
func (s ID) IsString() bool { return s.Type == StringID }

// IsInt reports whether ID is int.
func (s ID) IsInt() bool { return s.Type == IntID }

// SetString sets ID to string.
func (s *ID) SetString(v string) {
	s.Type = StringID
	s.String = v
}

// GetString returns string and true boolean if ID is string.
func (s ID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringID returns new ID from string.
func NewStringID(v string) ID {
	var s ID
	s.SetString(v)
	return s
}

// SetInt sets ID to int.
func (s *ID) SetInt(v int) {
	s.Type = IntID
	s.Int = v
}

// GetInt returns int and true boolean if ID is int.
func (s ID) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntID returns new ID from int.
func NewIntID(v int) ID {
	var s ID
	s.SetInt(v)
	return s
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) foobarGetRes()           {}
func (*NotFound) foobarPostRes()          {}
func (*NotFound) petGetAvatarByIDRes()    {}
func (*NotFound) petUploadAvatarByIDRes() {}

// NewOptData returns new OptData with value set to v.
func NewOptData(v Data) OptData {
	return OptData{
		Value: v,
		Set:   true,
	}
}

// OptData is optional Data.
type OptData struct {
	Value Data
	Set   bool
}

// IsSet returns true if OptData was set.
func (o OptData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptData) Reset() {
	var v Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptData) SetTo(v Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptData) Get() (v Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPet returns new OptPet with value set to v.
func NewOptPet(v Pet) OptPet {
	return OptPet{
		Value: v,
		Set:   true,
	}
}

// OptPet is optional Pet.
type OptPet struct {
	Value Pet
	Set   bool
}

// IsSet returns true if OptPet was set.
func (o OptPet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPet) Reset() {
	var v Pet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPet) SetTo(v Pet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPet) Get() (v Pet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPetName returns new OptPetName with value set to v.
func NewOptPetName(v PetName) OptPetName {
	return OptPetName{
		Value: v,
		Set:   true,
	}
}

// OptPetName is optional PetName.
type OptPetName struct {
	Value PetName
	Set   bool
}

// IsSet returns true if OptPetName was set.
func (o OptPetName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetName) Reset() {
	var v PetName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetName) SetTo(v PetName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetName) Get() (v PetName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPetType returns new OptPetType with value set to v.
func NewOptPetType(v PetType) OptPetType {
	return OptPetType{
		Value: v,
		Set:   true,
	}
}

// OptPetType is optional PetType.
type OptPetType struct {
	Value PetType
	Set   bool
}

// IsSet returns true if OptPetType was set.
func (o OptPetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetType) Reset() {
	var v PetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetType) SetTo(v PetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetType) Get() (v PetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Ref: #/components/schemas/Pet
type Pet struct {
	Primary      *Pet          `json:"primary"`
	ID           int64         `json:"id"`
	UniqueID     uuid.UUID     `json:"unique_id"`
	Name         string        `json:"name"`
	Type         OptPetType    `json:"type"`
	Kind         PetKind       `json:"kind"`
	Tag          OptUUID       `json:"tag"`
	IP           net.IP        `json:"ip"`
	IPV4         net.IP        `json:"ip_v4"`
	IPV6         net.IP        `json:"ip_v6"`
	URI          url.URL       `json:"uri"`
	Birthday     time.Time     `json:"birthday"`
	Rate         time.Duration `json:"rate"`
	Nickname     NilString     `json:"nickname"`
	NullStr      OptNilString  `json:"nullStr"`
	Friends      []Pet         `json:"friends"`
	Next         OptData       `json:"next"`
	TestInteger1 OptInt        `json:"testInteger1"`
	TestFloat1   OptFloat64    `json:"testFloat1"`
	TestArray1   [][]string    `json:"testArray1"`
	TestDate     OptTime       `json:"testDate"`
	TestDuration OptDuration   `json:"testDuration"`
	TestTime     OptTime       `json:"testTime"`
	TestDateTime OptTime       `json:"testDateTime"`
}

func (*Pet) foobarGetRes()  {}
func (*Pet) foobarPostRes() {}
func (*Pet) petGetRes()     {}

type PetGetAvatarByIDOKApplicationOctetStream struct {
	Data io.Reader
}

func (s PetGetAvatarByIDOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*PetGetAvatarByIDOKApplicationOctetStream) petGetAvatarByIDRes() {}

type PetGetDef struct {
	Message string `json:"message"`
}

// PetGetDefStatusCode wraps PetGetDef with StatusCode.
type PetGetDefStatusCode struct {
	StatusCode int
	Response   PetGetDef
}

func (*PetGetDefStatusCode) petGetRes() {}

type PetKind string

const (
	PetKindBig  PetKind = "big"
	PetKindSmol PetKind = "smol"
)

type PetName string

type PetType string

const (
	PetTypeFifa PetType = "fifa"
	PetTypeFofa PetType = "fofa"
)

// PetUpdateNameAliasPostDef is default response for PetUpdateNameAliasPost operation.
type PetUpdateNameAliasPostDef struct{}

// PetUpdateNameAliasPostDefStatusCode wraps PetUpdateNameAliasPostDef with StatusCode.
type PetUpdateNameAliasPostDefStatusCode struct {
	StatusCode int
	Response   PetUpdateNameAliasPostDef
}

// PetUpdateNamePostDef is default response for PetUpdateNamePost operation.
type PetUpdateNamePostDef struct{}

// PetUpdateNamePostDefStatusCode wraps PetUpdateNamePostDef with StatusCode.
type PetUpdateNamePostDefStatusCode struct {
	StatusCode int
	Response   PetUpdateNamePostDef
}

// PetUploadAvatarByIDOK is response for PetUploadAvatarByID operation.
type PetUploadAvatarByIDOK struct{}

func (*PetUploadAvatarByIDOK) petUploadAvatarByIDRes() {}

type Stream struct {
	Data io.Reader
}

func (s Stream) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}
